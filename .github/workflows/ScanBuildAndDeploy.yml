name: Build and Deploy AKS Store Quickstart

on:
  push:
    branches:
      - main

env:
  SPECTRAL_DSN: ${{ secrets.SPECTRAL_DSN }}

jobs:
  code_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install and run Spectral CI
        uses: checkpointsw/spectral-github-action@v3
        with:
          spectral-dsn: ${{ env.SPECTRAL_DSN }}
          spectral-args: scan --ok --engines secrets,iac,oss --include-tags base,audit3,iac

  build:
    runs-on: ubuntu-latest
    needs: code_scan
    outputs:
      next_build_number: ${{ steps.get_build_number.outputs.NEXT_BUILD_NUMBER }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}

      # Step to retrieve and increment the build number
      - name: Retrieve Build Number
        id: get_build_number
        run: |
          if [ ! -f build_number.txt ]; then echo "0" > build_number.txt; fi
          export BUILD_NUMBER=$(cat build_number.txt)
          export NEXT_BUILD_NUMBER=$((BUILD_NUMBER+1))
          echo "Next build number is $NEXT_BUILD_NUMBER"
          echo $NEXT_BUILD_NUMBER > build_number.txt
          echo "::set-output name=NEXT_BUILD_NUMBER::$NEXT_BUILD_NUMBER"  # Use job output

      - name: Commit the incremented build number
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git pull origin main  # Pull the latest changes before committing
          git add build_number.txt
          git commit -m "Increment build number to $NEXT_BUILD_NUMBER"
          git push origin main

  build_order_service:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}
      - name: Build Order Service Image
        run: |
          docker build -t ${{ secrets.ACR_REPO }}/code-to-scan/order-service:${{ needs.build.outputs.next_build_number }} ./src/order-service

  build_product_service:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}
      - name: Build Product Service Image
        run: |
          docker build -t ${{ secrets.ACR_REPO }}/code-to-scan/product-service:${{ needs.build.outputs.next_build_number }} ./src/product-service

  build_store_front:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}
      - name: Build Store Front Image
        run: |
          docker build -t ${{ secrets.ACR_REPO }}/code-to-scan/store-front:${{ needs.build.outputs.next_build_number }} ./src/store-front

  image_assurance:
    runs-on: ubuntu-latest
    needs: [build_order_service, build_product_service, build_store_front]
    steps:
      - name: Save Order Service Image to Tar
        run: |
          docker save ${{ secrets.ACR_REPO }}/code-to-scan/order-service:${{ needs.build.outputs.next_build_number }} -o order-service.tar

      - name: Scan Order Service Image
        run: |
          docker run -e CHKP_CLOUDGUARD_ID=${{ secrets.CHKP_CLOUDGUARD_ID }} \
                     -e CHKP_CLOUDGUARD_SECRET=${{ secrets.CHKP_CLOUDGUARD_SECRET }} \
                     -e SHIFTLEFT_REGION=${{ env.SHIFTLEFT_REGION }} \
                     -v $(pwd)/order-service.tar:/tmp/images/image.tar \
                     checkpoint/shiftleft:latest_v2 shiftleft image-scan -e ${{ secrets.SHIFTLEFT_ENV }} -i /tmp/images/image.tar

      - name: Save Product Service Image to Tar
        run: |
          docker save ${{ secrets.ACR_REPO }}/code-to-scan/product-service:${{ needs.build.outputs.next_build_number }} -o product-service.tar

      - name: Scan Product Service Image
        run: |
          docker run -e CHKP_CLOUDGUARD_ID=${{ secrets.CHKP_CLOUDGUARD_ID }} \
                     -e CHKP_CLOUDGUARD_SECRET=${{ secrets.CHKP_CLOUDGUARD_SECRET }} \
                     -e SHIFTLEFT_REGION=${{ env.SHIFTLEFT_REGION }} \
                     -v $(pwd)/product-service.tar:/tmp/images/image.tar \
                     checkpoint/shiftleft:latest_v2 shiftleft image-scan -e ${{ secrets.SHIFTLEFT_ENV }} -i /tmp/images/image.tar

      - name: Save Store Front Image to Tar
        run: |
          docker save ${{ secrets.ACR_REPO }}/code-to-scan/store-front:${{ needs.build.outputs.next_build_number }} -o store-front.tar

      - name: Scan Store Front Image
        run: |
          docker run -e CHKP_CLOUDGUARD_ID=${{ secrets.CHKP_CLOUDGUARD_ID }} \
                     -e CHKP_CLOUDGUARD_SECRET=${{ secrets.CHKP_CLOUDGUARD_SECRET }} \
                     -e SHIFTLEFT_REGION=${{ env.SHIFTLEFT_REGION }} \
                     -v $(pwd)/store-front.tar:/tmp/images/image.tar \
                     checkpoint/shiftleft:latest_v2 shiftleft image-scan -e ${{ secrets.SHIFTLEFT_ENV }} -i /tmp/images/image.tar

  push:
    runs-on: ubuntu-latest
    needs: image_assurance
    steps:
      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}

      - name: Push Order Service Image
        run: |
          docker push ${{ secrets.ACR_REPO }}/code-to-scan/order-service:${{ needs.build.outputs.next_build_number }}

      - name: Push Product Service Image
        run: |
          docker push ${{ secrets.ACR_REPO }}/code-to-scan/product-service:${{ needs.build.outputs.next_build_number }}

      - name: Push Store Front Image
        run: |
          docker push ${{ secrets.ACR_REPO }}/code-to-scan/store-front:${{ needs.build.outputs.next_build_number }}
