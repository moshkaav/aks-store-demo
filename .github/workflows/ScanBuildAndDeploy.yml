name: Build and Deploy AKS Store Quickstart

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger for the workflow

env:
  SPECTRAL_DSN: ${{ secrets.SPECTRAL_DSN }}

jobs:
  # Code scanning step
  code_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install and run Spectral CI
        uses: checkpointsw/spectral-github-action@v3
        with:
          spectral-dsn: ${{ secrets.SPECTRAL_DSN }}
          spectral-args: scan --ok --engines secrets,iac,oss --include-tags base,audit3,iac

  # Build and cache the services
  build:
    runs-on: ubuntu-latest
    needs: code_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx with cache enabled
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:latest

      - name: Cache Docker layers
        id: cache-docker-layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}

      - name: Retrieve Build Number
        run: |
          if [ ! -f build_number.txt ]; then echo "0" > build_number.txt; fi
          BUILD_NUMBER=$(cat build_number.txt)
          NEXT_BUILD_NUMBER=$((BUILD_NUMBER+1))
          echo $NEXT_BUILD_NUMBER > build_number.txt
        id: build_number

      - name: Commit the incremented build number
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git pull origin main
          git add build_number.txt
          git commit -m "Increment build number to $(cat build_number.txt)"
          git push origin main

      - name: Upload Build Number Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-number
          path: build_number.txt

  build_order_service:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Build Number Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-number

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}

      - name: Build Order Service Image with Cache
        run: |
          NEXT_BUILD_NUMBER=$(cat build_number.txt)
          echo "Using build number: $NEXT_BUILD_NUMBER"
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
                             --builder default --push \
                             -t ${{ secrets.ACR_REPO }}/code-to-cloud/order-service:$NEXT_BUILD_NUMBER ./src/order-service
          docker inspect --format='{{index .Id}}' ${{ secrets.ACR_REPO }}/code-to-cloud/order-service:$NEXT_BUILD_NUMBER > order-service-digest.txt
          docker save ${{ secrets.ACR_REPO }}/code-to-cloud/order-service:$NEXT_BUILD_NUMBER -o order-service.tar

      - name: Upload Order Service Image and Digest
        uses: actions/upload-artifact@v3
        with:
          name: order-service-image
          path: order-service.tar

      - name: Upload Order Service Digest
        uses: actions/upload-artifact@v3
        with:
          name: order-service-digest
          path: order-service-digest.txt

  build_product_service:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Build Number Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-number

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}

      - name: Build Product Service Image with Cache
        run: |
          NEXT_BUILD_NUMBER=$(cat build_number.txt)
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
                             --builder default --push \
                             -t ${{ secrets.ACR_REPO }}/code-to-cloud/product-service:$NEXT_BUILD_NUMBER ./src/product-service
          docker inspect --format='{{index .Id}}' ${{ secrets.ACR_REPO }}/code-to-cloud/product-service:$NEXT_BUILD_NUMBER > product-service-digest.txt
          docker save ${{ secrets.ACR_REPO }}/code-to-cloud/product-service:$NEXT_BUILD_NUMBER -o product-service.tar

      - name: Upload Product Service Image and Digest
        uses: actions/upload-artifact@v3
        with:
          name: product-service-image
          path: product-service.tar

      - name: Upload Product Service Digest
        uses: actions/upload-artifact@v3
        with:
          name: product-service-digest
          path: product-service-digest.txt

  build_store_front:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Build Number Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-number

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}

      - name: Build Store Front Image with Cache
        run: |
          NEXT_BUILD_NUMBER=$(cat build_number.txt)
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
                             --builder default --push \
                             -t ${{ secrets.ACR_REPO }}/code-to-cloud/store-front:$NEXT_BUILD_NUMBER ./src/store-front
          docker inspect --format='{{index .Id}}' ${{ secrets.ACR_REPO }}/code-to-cloud/store-front:$NEXT_BUILD_NUMBER > store-front-digest.txt
          docker save ${{ secrets.ACR_REPO }}/code-to-cloud/store-front:$NEXT_BUILD_NUMBER -o store-front.tar

      - name: Upload Store Front Image and Digest
        uses: actions/upload-artifact@v3
        with:
          name: store-front-image
          path: store-front.tar

      - name: Upload Store Front Digest
        uses: actions/upload-artifact@v3
        with:
          name: store-front-digest
          path: store-front-digest.txt

  # Image Assurance Jobs (for Order, Product, and Store Front services)
  image_assurance_order_service:
    runs-on: ubuntu-latest
    needs: build_order_service
    steps:
      - name: Download Build Number Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-number

      - name: Download Order Service Image
        uses: actions/download-artifact@v3
        with:
          name: order-service-image

      - name: Download Order Service Digest
        uses: actions/download-artifact@v3
        with:
          name: order-service-digest

      - name: Load Docker Image from tar file
        run: docker load -i order-service.tar

      - name: Verify Order Service Image Digest
        run: |
          LOCAL_DIGEST=$(docker inspect --format='{{index .Id}}' ${{ secrets.ACR_REPO }}/code-to-cloud/order-service:$(cat build_number.txt))
          EXPECTED_DIGEST=$(cat order-service-digest.txt)
          if [ "$LOCAL_DIGEST" != "$EXPECTED_DIGEST" ]; then
            echo "Image digest mismatch! Expected: $EXPECTED_DIGEST, Got: $LOCAL_DIGEST"
            exit 1
          fi
          echo "Order Service image digest verified."

      - name: Run Order Service Image Assurance
        run: |
          NEXT_BUILD_NUMBER=$(cat build_number.txt)
          docker run -e CHKP_CLOUDGUARD_ID=${{ secrets.CHKP_CLOUDGUARD_ID }} \
                     -e CHKP_CLOUDGUARD_SECRET=${{ secrets.CHKP_CLOUDGUARD_SECRET }} \
                     -e SHIFTLEFT_REGION=${{ vars.SHIFTLEFT_REGION }} \
                     -v $(pwd)/order-service.tar:/tmp/images/image.tar \
                     checkpoint/shiftleft:latest_v2 shiftleft image-scan -e ${{ secrets.SHIFTLEFT_ENV }} -i /tmp/images/image.tar

  image_assurance_product_service:
    runs-on: ubuntu-latest
    needs: build_product_service
    steps:
      - name: Download Build Number Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-number

      - name: Download Product Service Image
        uses: actions/download-artifact@v3
        with:
          name: product-service-image

      - name: Download Product Service Digest
        uses: actions/download-artifact@v3
        with:
          name: product-service-digest

      - name: Load Docker Image from tar file
        run: docker load -i product-service.tar

      - name: Verify Product Service Image Digest
        run: |
          LOCAL_DIGEST=$(docker inspect --format='{{index .Id}}' ${{ secrets.ACR_REPO }}/code-to-cloud/product-service:$(cat build_number.txt))
          EXPECTED_DIGEST=$(cat product-service-digest.txt)
          if [ "$LOCAL_DIGEST" != "$EXPECTED_DIGEST" ]; then
            echo "Image digest mismatch! Expected: $EXPECTED_DIGEST, Got: $LOCAL_DIGEST"
            exit 1
          fi
          echo "Product Service image digest verified."

      - name: Run Product Service Image Assurance
        run: |
          NEXT_BUILD_NUMBER=$(cat build_number.txt)
          docker run -e CHKP_CLOUDGUARD_ID=${{ secrets.CHKP_CLOUDGUARD_ID }} \
                     -e CHKP_CLOUDGUARD_SECRET=${{ secrets.CHKP_CLOUDGUARD_SECRET }} \
                     -e SHIFTLEFT_REGION=${{ vars.SHIFTLEFT_REGION }} \
                     -v $(pwd)/product-service.tar:/tmp/images/image.tar \
                     checkpoint/shiftleft:latest_v2 shiftleft image-scan -e ${{ secrets.SHIFTLEFT_ENV }} -i /tmp/images/image.tar

  image_assurance_store_front:
    runs-on: ubuntu-latest
    needs: build_store_front
    steps:
      - name: Download Build Number Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-number

      - name: Download Store Front Image
        uses: actions/download-artifact@v3
        with:
          name: store-front-image

      - name: Download Store Front Digest
        uses: actions/download-artifact@v3
        with:
          name: store-front-digest

      - name: Load Docker Image from tar file
        run: docker load -i store-front.tar

      - name: Verify Store Front Image Digest
        run: |
          LOCAL_DIGEST=$(docker inspect --format='{{index .Id}}' ${{ secrets.ACR_REPO }}/code-to-cloud/store-front:$(cat build_number.txt))
          EXPECTED_DIGEST=$(cat store-front-digest.txt)
          if [ "$LOCAL_DIGEST" != "$EXPECTED_DIGEST" ]; then
            echo "Image digest mismatch! Expected: $EXPECTED_DIGEST, Got: $LOCAL_DIGEST"
            exit 1
          fi
          echo "Store Front image digest verified."

      - name: Run Store Front Image Assurance
        run: |
          NEXT_BUILD_NUMBER=$(cat build_number.txt)
          docker run -e CHKP_CLOUDGUARD_ID=${{ secrets.CHKP_CLOUDGUARD_ID }} \
                     -e CHKP_CLOUDGUARD_SECRET=${{ secrets.CHKP_CLOUDGUARD_SECRET }} \
                     -e SHIFTLEFT_REGION=${{ vars.SHIFTLEFT_REGION }} \
                     -v $(pwd)/store-front.tar:/tmp/images/image.tar \
                     checkpoint/shiftleft:latest_v2 shiftleft image-scan -e ${{ secrets.SHIFTLEFT_ENV }} -i /tmp/images/image.tar

  # Push images to ACR after assurance steps
  push:
    runs-on: ubuntu-latest
    needs: [image_assurance_order_service, image_assurance_product_service, image_assurance_store_front]
    steps:
      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REPO }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASS }}

      - name: Download Build Number Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-number

      - name: Push Order Service Image
        run: |
          NEXT_BUILD_NUMBER=$(cat build_number.txt)
          docker push ${{ secrets.ACR_REPO }}/code-to-cloud/order-service:$NEXT_BUILD_NUMBER

      - name: Push Product Service Image
        run: |
          NEXT_BUILD_NUMBER=$(cat build_number.txt)
          docker push ${{ secrets.ACR_REPO }}/code-to-cloud/product-service:$NEXT_BUILD_NUMBER

      - name: Push Store Front Image
        run: |
          NEXT_BUILD_NUMBER=$(cat build_number.txt)
          docker push ${{ secrets.ACR_REPO }}/code-to-cloud/store-front:$NEXT_BUILD_NUMBER
